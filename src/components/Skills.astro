---
import { skills } from '../data/skills';

const skillsByCategory = {
  frontend: skills.filter(skill => skill.category === 'frontend'),
  backend: skills.filter(skill => skill.category === 'backend'),
  security: skills.filter(skill => skill.category === 'security'),
  tools: skills.filter(skill => skill.category === 'tools'),
};

const categoryColors = {
  frontend: 'primary',
  backend: 'accent',
  security: 'error',
  tools: 'secondary',
};
---

<section id="skills" class="py-20">
  <div class="container mx-auto px-6">
    <div class="max-w-6xl mx-auto">
      <h2 class="text-4xl md:text-5xl font-bold text-center mb-16">
        <span class="gradient-text">Skills & Technologies</span>
      </h2>
      
      <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
        {Object.entries(skillsByCategory).map(([category, categorySkills], index) => {
          const rotationClasses = [
            'card-rotate-wobble',
            'card-rotate-pendulum', 
            'card-rotate-dance',
            'card-rotate-wave'
          ];
          const rotationClass = rotationClasses[index % rotationClasses.length];
          const delayClass = `card-delay-${(index % 4) + 1}`;
          
          return (
          <div class={`glass-effect rounded-2xl p-6 transition-all duration-500 skill-card-effect group ${rotationClass} ${delayClass}`}>
            <h3 class="text-xl font-semibold mb-6 text-center capitalize">
              <span class={`text-${categoryColors[category]}-400`}>
                {category === 'frontend' ? 'Frontend' : 
                 category === 'backend' ? 'Backend' : 
                 category === 'security' ? 'Security' : 
                 'Tools & DevOps'}
              </span>
            </h3>
            
            <div class="space-y-4">
              {categorySkills.map((skill) => (
                <div class="space-y-2">
                  <div class="flex justify-between items-center">
                    <span class="text-sm font-medium text-dark-200">{skill.name}</span>
                    <span class="text-xs text-dark-400">{skill.level}%</span>
                  </div>
                  <div class="w-full bg-dark-700 rounded-full h-2">
                    <div 
                      class={`h-2 rounded-full bg-${categoryColors[category]}-500 transition-all duration-700 ease-out skill-bar relative overflow-hidden`}
                      style={`width: ${skill.level}%`}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )})}
      </div>
      
      <!-- Technology Logos -->
      <div class="mt-16">
        <h3 class="text-2xl font-semibold text-center mb-8 text-dark-300">Technologies I Work With</h3>
        <div class="flex flex-wrap justify-center gap-6">
          {[
            'React', 'Vue.js', 'Laravel', 'Node.js', 'Python', 'Docker', 
            'AWS', 'PostgreSQL', 'Redis', 'TypeScript', 'Tailwind', 'Linux'
          ].map((tech) => (
            <div class="bg-dark-800 hover:bg-dark-700 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300 tech-badge">
              {tech}
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .skill-card-effect {
    position: relative;
    animation: skillFloat 7s ease-in-out infinite;
  }
  
  .skill-card-effect::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transition: left 0.8s ease;
    border-radius: 1rem;
  }
  
  .skill-card-effect:hover::before {
    left: 100%;
  }
  
  .skill-card-effect:hover {
    transform: translateY(-8px) scale(1.03);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  }
  
  .skill-bar::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    transition: left 1s ease;
  }
  
  .skill-card-effect:hover .skill-bar::before {
    left: 100%;
  }
  
  .tech-badge {
    position: relative;
    overflow: hidden;
  }
  
  .tech-badge::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, transparent, rgba(59, 130, 246, 0.3), transparent);
    transition: left 0.5s ease;
  }
  
  .tech-badge:hover::before {
    left: 100%;
  }
  
  .tech-badge:hover {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 0 8px 16px rgba(59, 130, 246, 0.3);
  }
  
  @keyframes skillFloat {
    0%, 100% { 
      transform: translateY(0px) rotateZ(0deg); 
    }
    50% { 
      transform: translateY(-3px) rotateZ(0.3deg); 
    }
  }
</style>

<script>
  // Animate skill bars on scroll
  const observerOptions = {
    threshold: 0.3,
    once: true
  };

  const skillBars = document.querySelectorAll('.h-2.rounded-full');
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const bar = entry.target;
        const width = bar.style.width;
        bar.style.width = '0%';
        
        setTimeout(() => {
          bar.style.width = width;
        }, 100);
      }
    });
  }, observerOptions);

  skillBars.forEach(bar => observer.observe(bar));
</script>