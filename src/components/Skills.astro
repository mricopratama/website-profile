---
import { 
  SiAstro, SiTypescript, SiTailwindcss, SiNextdotjs, SiPostgresql, 
  SiMysql, SiRedis, SiNginx, SiLaravel, SiPython, SiDocker, SiAmazon, SiGit, 
  SiLinux, SiVuedotjs, SiSelenium, SiCypress, SiJest, SiPostman, 
  SiBurpsuite, SiPhp, SiCisco, SiGo
} from 'react-icons/si';
import { FaJava, FaReact, FaNodeJs, FaUserSecret, FaBug } from 'react-icons/fa';
import { GoShieldCheck } from "react-icons/go";
import { PiListNumbersBold } from "react-icons/pi";
import { skills } from '../data/skills';

const iconMap = {
  'Java': FaJava,
  'PHP': SiPhp,
  'Cisco Networking': SiCisco,
  'Go': SiGo,
  'React': FaReact,
  'Vue.js': SiVuedotjs,
  'Astro': SiAstro,
  'TypeScript': SiTypescript,
  'Tailwind CSS': SiTailwindcss,
  'Next.js': SiNextdotjs,
  'Laravel': SiLaravel,
  'Node.js': FaNodeJs,
  'Python': SiPython,
  'PostgreSQL': SiPostgresql,
  'MySQL': SiMysql,
  'Redis': SiRedis,
  'Penetration Testing': FaUserSecret,
  'Network Security': GoShieldCheck,
  'OWASP Top 10': PiListNumbersBold,
  'Vulnerability Assessment': FaBug,
  'Docker': SiDocker,
  'AWS': SiAmazon,
  'Git': SiGit,
  'Linux': SiLinux,
  'Nginx': SiNginx,
  'Selenium': SiSelenium,
  'Cypress': SiCypress,
  'Jest': SiJest,
  'Burp Suite': SiBurpsuite,
  'Postman': SiPostman,
};

const skillsPerRow = 6;
const rows = [];
for (let i = 0; i < skills.length; i += skillsPerRow) {
    rows.push(skills.slice(i, i + skillsPerRow));
}
---

<section id="skills" class="py-20 text-white min-h-screen flex flex-col justify-center items-center overflow-hidden">
  <div class="container mx-auto px-4 text-center">
    <h2 class="text-4xl md:text-5xl font-bold text-center mb-8">
      <span class="gradient-text">Skills</span>
    </h2>
    <div id="skill-display-area" class="mb-16 min-h-[100px] max-w-2xl mx-auto p-6 border border-gray-700 rounded-lg bg-gray-900/50">
      <h3 id="skill-name-display" class="text-2xl font-bold transition-colors duration-300">Select a Skill</h3>
      <div class="overflow-hidden h-[50px] mt-2">
        <p id="skill-description-display" class="transition-all duration-300 ease-in-out">Click on a keycap below to see the details here.</p>
      </div>
    </div>
    <div class="keyboard">
      <div class="keyboard-body">
        {rows.map((row, rowIdx) => (
          <div class="keyboard-row" key={rowIdx}>
            {row.map((skill) => {
              const Icon = iconMap[skill.name];
              return (
                <button
                  class="keycap"
                  data-name={skill.name}
                  data-description={skill.description}
                  aria-label={`Skill: ${skill.name}`}
                  style={{ '--glow-color': skill.color }}
                  key={skill.name}
                  type="button"
                >
                  <div class="keycap-top">
                    {Icon && <Icon size={48} />}
                  </div>
                </button>
              );
            })}
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  :root {
    --key-size: 90px;
    --key-height: 12px;
    --key-press-depth: 6px;
  }
  .keyboard {
    display: flex;
    justify-content: center;
    width: 100%;
  }
  .keyboard-body {
    margin-top: 1rem; 
  }
  .keyboard-row {
    display: flex;
    gap: 0.75rem;
  }
  .keyboard-row:not(:last-child) {
    margin-bottom: 0.75rem;
  }
  /* CSS untuk stagger (berjenjang) hanya untuk baris genap */
  .keyboard-row:nth-child(2),
  .keyboard-row:nth-child(4) {
    transform: translateX(calc(var(--key-size) / 2));
  }
  #skill-display-area {
    transition: all 0.3s ease;
  }
  #skill-description-display {
    color: #cccccc;
    transform: translateY(100%);
    opacity: 0;
  }
  #skill-description-display.visible {
    transform: translateY(0);
    opacity: 1;
  }
  .keycap {
    width: var(--key-size);
    height: var(--key-size);
    background-color: var(--glow-color);
    border-radius: 12px;
    border: none;
    color: #1a202c;
    cursor: pointer;
    position: relative;
    box-shadow:
      inset 0 6px 8px 0 rgba(255, 255, 255, 0.25),
      inset 0 -8px 8px 0 rgba(0, 0, 0, 0.3),
      0px var(--key-height) 0px 0px color-mix(in srgb, var(--glow-color) 60%, black);
    transition: transform 0.1s ease, box-shadow 0.1s ease, filter 0.2s;
    will-change: transform, box-shadow, filter;
    filter: brightness(0.85);
  }
  .keycap-top {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    filter: brightness(1.3);
    transition: filter 0.2s ease;
  }
  .keycap:hover {
    filter: brightness(1);
  }
  .keycap:active {
    transform: translateY(var(--key-press-depth));
    box-shadow:
      inset 0 3px 4px 0 rgba(255, 255, 255, 0.25),
      inset 0 -4px 4px 0 rgba(0, 0, 0, 0.3),
      0px calc(var(--key-height) - var(--key-press-depth)) 0px 0px color-mix(in srgb, var(--glow-color) 60%, black);
  }
  .keycap.active {
    filter: brightness(1.1);
    transform: translateY(var(--key-press-depth));
    box-shadow:
      inset 0 4px 6px 0 rgba(255, 255, 255, 0.3),
      inset 0 -6px 6px 0 rgba(0, 0, 0, 0.3),
      0px calc(var(--key-height) - var(--key-press-depth)) 0px 0px color-mix(in srgb, var(--glow-color) 60%, black),
      0 0 40px 8px var(--glow-color, #fff);
    animation: pulse-glow 2s infinite ease-in-out;
  }
  @keyframes pulse-glow {
    0%, 100% {
      box-shadow:
        inset 0 4px 6px 0 rgba(255, 255, 255, 0.3),
        inset 0 -6px 6px 0 rgba(0, 0, 0, 0.3),
        0px calc(var(--key-height) - var(--key-press-depth)) 0px 0px color-mix(in srgb, var(--glow-color) 60%, black),
        0 0 40px 8px var(--glow-color, #fff);
    }
    50% {
      box-shadow:
        inset 0 4px 6px 0 rgba(255, 255, 255, 0.3),
        inset 0 -6px 6px 0 rgba(0, 0, 0, 0.3),
        0px calc(var(--key-height) - var(--key-press-depth)) 0px 0px color-mix(in srgb, var(--glow-color) 60%, black),
        0 0 55px 12px var(--glow-color, #fff);
    }
  }
  @media (max-width: 768px) {
    :root { --key-size: 60px; --key-height: 10px; }
    .keyboard-row { gap: 0.5rem; }
    .keyboard-row:not(:last-child) { margin-bottom: 0.5rem; }
    .keycap svg { width: 32px; height: 32px; }
  }
  @media (max-width: 480px) {
    :root { --key-size: 45px; --key-height: 8px; }
    .keycap svg { width: 24px; height: 24px; }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const keycaps = document.querySelectorAll('.keycap');
  const nameDisplay = document.getElementById('skill-name-display');
  const descriptionDisplay = document.getElementById('skill-description-display');
  const skillsPerRow = 6;
  let activeIndex = -1;

  if (keycaps.length === 0) {
    console.error("Elemen skill (keycap) tidak ditemukan.");
    return;
  }

  function resetDisplay() {
    descriptionDisplay.classList.remove('visible');
    setTimeout(() => {
        nameDisplay.textContent = 'Select a Skill';
        descriptionDisplay.textContent = 'Click on a keycap below to see the details here.';
        nameDisplay.style.color = '';
        descriptionDisplay.classList.add('visible');
    }, 150);
  }

  function setActiveKey(index) {
    if (activeIndex === index) return;
    if (activeIndex !== -1) {
      keycaps[activeIndex].classList.remove('active');
    }
    activeIndex = index;
    const key = keycaps[activeIndex];
    key.classList.add('active');
    const name = key.dataset.name;
    const description = key.dataset.description;
    const activeColor = window.getComputedStyle(key).getPropertyValue('--glow-color').trim();

    descriptionDisplay.classList.remove('visible');
    setTimeout(() => {
        nameDisplay.textContent = name;
        descriptionDisplay.textContent = description;
        nameDisplay.style.color = activeColor;
        descriptionDisplay.classList.add('visible');
    }, 150);
  }

  keycaps.forEach((key, index) => {
    key.addEventListener('click', () => {
      if (activeIndex === index) {
        key.classList.remove('active');
        activeIndex = -1;
        resetDisplay();
      } else {
        setActiveKey(index);
      }
    });
  });

  document.addEventListener('keydown', (e) => {
    let newIndex = activeIndex;
    if (activeIndex === -1) {
      if (['ArrowRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp'].includes(e.key)) {
        newIndex = 0;
      } else {
        return;
      }
    } else {
      switch (e.key) {
        case 'ArrowRight':
          newIndex = (activeIndex + 1) % keycaps.length;
          break;
        case 'ArrowLeft':
          newIndex = (activeIndex - 1 + keycaps.length) % keycaps.length;
          break;
        case 'ArrowDown':
          newIndex = (activeIndex + skillsPerRow);
          if (newIndex >= keycaps.length) {
            newIndex = activeIndex % skillsPerRow;
          }
          break;
        case 'ArrowUp':
          newIndex = (activeIndex - skillsPerRow + keycaps.length) % keycaps.length;
          break;
        default:
          return;
      }
    }
    e.preventDefault();
    setActiveKey(newIndex);
  });

  resetDisplay();
});
</script>