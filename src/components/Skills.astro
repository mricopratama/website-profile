---
import { SiCryptpad, SiAstro, SiTypescript, SiTailwindcss, SiNextdotjs, SiPostgresql, SiMysql, SiRedis, SiNginx, SiLaravel, SiPython, SiDocker, SiAmazon, SiGit, SiLinux, SiApache, SiVuedotjs } from 'react-icons/si';
import { FaReact, FaNodeJs, FaUserSecret, FaBug } from 'react-icons/fa';
import { GoShieldCheck } from "react-icons/go";
import { FaToolbox } from 'react-icons/fa6';
import { PiListNumbersBold } from "react-icons/pi";
import { AiOutlineAlert } from "react-icons/ai";
import { skills } from '../data/skills';
import { SiSelenium, SiCypress, SiJest, SiPostman, SiApachejmeter, SiBurpsuite } from 'react-icons/si';

const categoryColors = {
  frontend: 'primary',
  backend: 'accent',
  security: 'error',
  tools: 'secondary',
  sqa: 'warning',
};

const iconMap = {
  'React': FaReact,
  'Vue.js': SiVuedotjs,
  'Astro': SiAstro,
  'TypeScript': SiTypescript,
  'Tailwind CSS': SiTailwindcss,
  'Next.js': SiNextdotjs,
  'Laravel': SiLaravel,
  'Node.js': FaNodeJs,
  'Python': SiPython,
  'PostgreSQL': SiPostgresql,
  'MySQL': SiMysql,
  'Redis': SiRedis,
  'Penetration Testing': FaUserSecret,
  'Network Security': GoShieldCheck,
  'Cryptography': SiCryptpad,
  'OWASP Top 10': PiListNumbersBold,
  'Vulnerability Assessment': FaBug,
  'Incident Response': AiOutlineAlert,
  'Docker': SiDocker,
  'AWS': SiAmazon,
  'Git': SiGit,
  'Linux': SiLinux,
  'Nginx': SiNginx,
  'Apache': SiApache,
  'Selenium': SiSelenium,
  'Cypress': SiCypress,
  'Jest': SiJest,
  'Burp Suite': SiBurpsuite,
  'Postman': SiPostman,
  'JMeter': SiApachejmeter,
};
---

<section id="skills" class="py-20">
  <div class="container mx-auto px-6">
    <div class="max-w-6xl mx-auto">
      <h2 class="text-4xl md:text-5xl font-bold text-center mb-16">
        <span class="gradient-text cyber-skills-title">
          <FaToolbox className="skills-icon" />
          <span>Arsenal & Capabilities</span>
          <span class="skills-scanner"></span>
        </span>
      </h2>
      
      <div class="flex flex-wrap justify-center gap-6 skills-arsenal-grid">
        {skills.map((skill, index) => {
          const Icon = iconMap[skill.name] || FaToolbox; // Default ke TbToolbox

          return (
            <div class={`skill-badge-advanced skill-badge-${index % 8}`} data-skill={skill.name} data-category={skill.category}>
              {/* Logika render sekarang menjadi sangat sederhana */}
              <Icon className="skill-icon" />
              <span class="skill-name">{skill.name}</span>
              <div class="skill-radar"></div>
              <div class={`skill-category-indicator bg-${categoryColors[skill.category]}-500`}></div>
            </div>
          )
        })}
      </div>
    </div>
  </div>
</section>

{/* Pastikan CSS dan Script dari sebelumnya tetap ada di sini */}
<style>
  .cyber-skills-title {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 1rem;
  }
  
  .skills-icon {
    width: 2.5rem;
    height: 2.5rem;
    animation: weaponSpin 4s linear infinite;
    color: white; 
  }
  
  .skills-scanner {
    position: absolute;
    bottom: -4px;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, transparent, #00ff00, transparent);
    animation: titleScan 2s ease-in-out infinite;
  }
  
  @keyframes weaponSpin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  @keyframes titleScan {
    0%, 100% { transform: scaleX(0); opacity: 0; }
    50% { transform: scaleX(1); opacity: 1; }
  }

  .skills-arsenal-grid {
    position: relative;
    opacity: 0;
    animation: skillsArsenalFadeIn 0.8s ease-out 0.5s forwards;
  }

  @keyframes skillsArsenalFadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .skill-badge-advanced {
    position: relative;
    background: rgba(0, 0, 0, 0.8);
    border: 1px solid rgba(0, 255, 0, 0.3);
    border-radius: 12px;
    padding: 1.5rem 1rem;
    min-width: 140px;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    transition: all 0.3s ease;
    cursor: pointer;
    overflow: hidden;
    transform: translateX(200px);
    opacity: 0;
    animation: skillCircularSlide 1s ease-out forwards;
  }

  .skill-badge-advanced:hover {
    border-color: #00ff00;
    box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);
    transform: translateY(-8px) scale(1.05) rotate(2deg);
  }

  .skill-badge-0 { animation-delay: 0.1s; }
  .skill-badge-1 { animation-delay: 0.2s; }
  .skill-badge-2 { animation-delay: 0.3s; }
  .skill-badge-3 { animation-delay: 0.4s; }
  .skill-badge-4 { animation-delay: 0.5s; }
  .skill-badge-5 { animation-delay: 0.6s; }
  .skill-badge-6 { animation-delay: 0.7s; }
  .skill-badge-7 { animation-delay: 0.8s; }

  @keyframes skillCircularSlide {
    from { transform: translateX(200px) rotate(10deg); opacity: 0; }
    50% { transform: translateX(-20px) rotate(-2deg); opacity: 0.8; }
    to { transform: translateX(0) rotate(0deg); opacity: 1; }
  }
  
  .skill-name {
    font-weight: 600;
    color: #ffffff;
    text-align: center;
    font-size: 0.9rem;
  }

  .skill-radar {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border: 1px solid rgba(0, 255, 0, 0.5);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.5s ease;
  }

  .skill-badge-advanced:hover .skill-radar {
    width: 100%;
    height: 100%;
    animation: skillRadarScan 2s ease-in-out infinite;
  }

  .skill-category-indicator {
    position: absolute;
    top: 8px;
    right: 8px;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    opacity: 0.7;
  }

  @keyframes skillIconFloat {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-4px) rotate(5deg); }
  }

  @keyframes skillRadarScan {
    0% { opacity: 1; transform: translate(-50%, -50%) scale(0); }
    100% { opacity: 0; transform: translate(-50%, -50%) scale(1.5); }
  }
</style>

<script>
  const observerOptions = {
    threshold: 0.2,
    rootMargin: '0px 0px -50px 0px'
  };
  const skillBadges = document.querySelectorAll('.skill-badge-advanced');
  const badgeObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.style.animationPlayState = 'running';
      }
    });
  }, observerOptions);
  skillBadges.forEach(badge => {
    badge.style.animationPlayState = 'paused';
    badgeObserver.observe(badge);
  });
  skillBadges.forEach(badge => {
    badge.addEventListener('mouseenter', () => {
      badge.style.transform = 'translateY(-8px) scale(1.05) rotate(2deg)';
    });
    badge.addEventListener('mouseleave', () => {
      badge.style.transform = 'translateY(0) scale(1) rotate(0deg)';
    });
  });
</script>

<!-- <style>
  .cyber-skills-title {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 1rem;
  }
  
  .skills-icon {
    width: 2.5rem;
    height: 2.5rem;
    animation: weaponSpin 4s linear infinite;
  }
  
  .skills-scanner {
    position: absolute;
    bottom: -4px;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, transparent, #00ff00, transparent);
    animation: titleScan 2s ease-in-out infinite;
  }
  
  @keyframes weaponSpin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  @keyframes skillsScan {
    0%, 100% { transform: scaleX(0); opacity: 0; }
    50% { transform: scaleX(1); opacity: 1; }
  }
  
  .cyber-category-title {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }
  
  .category-icon {
    width: 2rem; 
    height: 2rem;
    animation: categoryPulse 2s ease-in-out infinite;
  }
  
  .category-status {
    width: 60%;
    height: 2px;
    background: linear-gradient(90deg, transparent, currentColor, transparent);
    animation: statusScan 2s ease-in-out infinite;
  }
  
  @keyframes categoryPulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.2); }
  }
  
  @keyframes statusScan {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 1; }
  }
  
  .skill-item {
    position: relative;
    padding: 0.5rem;
    border-radius: 6px;
    background: rgba(0, 0, 0, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.05);
    transition: all 0.3s ease;
  }
  
  .skill-item:hover {
    border-color: rgba(0, 255, 0, 0.3);
    background: rgba(0, 255, 0, 0.05);
    transform: translateX(4px);
  }
  
  .skill-name {
    position: relative;
  }
  
  .skill-name::before {
    content: 'â–¶';
    position: absolute;
    left: -1rem;
    color: #00ff00;
    font-size: 0.7rem;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .skill-item:hover .skill-name::before {
    opacity: 1;
  }
  
  .skill-percentage {
    font-family: 'JetBrains Mono', monospace;
    color: #00ff00;
    text-shadow: 0 0 5px currentColor;
  }
  
  .cyber-skill-bar {
    position: relative;
    overflow: hidden;
  }
  
  .skill-bar-glow {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    animation: skillGlow 2s ease-in-out infinite;
  }
  
  .skill-bar-pulse {
    position: absolute;
    top: 0;
    right: 0;
    width: 4px;
    height: 100%;
    background: rgba(255, 255, 255, 0.8);
    animation: skillPulse 1s ease-in-out infinite;
  }
  
  @keyframes skillGlow {
    0%, 100% { transform: translateX(-100%); }
    50% { transform: translateX(100%); }
  }
  
  @keyframes skillPulse {
    0%, 100% { opacity: 0; }
    50% { opacity: 1; }
  }
  
  .cyber-tech-title {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .tech-title-icon {
    width: 1.5rem;
    height: 1.5rem;
    animation: techScan 3s ease-in-out infinite;
  }
  
  .tech-scanner-line {
    position: absolute;
    bottom: -4px;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, #00ff00, transparent);
    animation: techLineScan 2s ease-in-out infinite;
  }
  
  @keyframes techScan {
    0%, 100% { transform: scale(1) rotate(0deg); }
    50% { transform: scale(1.1) rotate(10deg); }
  }
  
  @keyframes techLineScan {
    0%, 100% { opacity: 0.3; transform: scaleX(0); }
    50% { opacity: 1; transform: scaleX(1); }
  }
  
  .tech-arsenal-grid {
    position: relative;
  }
  
  .tech-badge-advanced {
    position: relative;
    background: rgba(0, 0, 0, 0.8);
    border: 1px solid rgba(0, 255, 0, 0.3);
    border-radius: 12px;
    padding: 1rem;
    min-width: 120px;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
    cursor: pointer;
    overflow: hidden;
  }
  
  .tech-badge-advanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(0, 255, 0, 0.1), transparent);
    transition: left 0.5s ease;
  }
  
  .tech-badge-advanced:hover::before {
    left: 100%;
  }
  
  .tech-badge-advanced:hover {
    border-color: #00ff00;
    box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);
    transform: translateY(-8px) scale(1.05);
  }
  
  .tech-icon {
    width: 2.5rem;
    height: 2.5rem;
    animation: techIconFloat 3s ease-in-out infinite;
  }
  
  .tech-name {
    font-weight: 600;
    color: #ffffff;
    text-align: center;
  }
  
  .tech-level {
    font-size: 0.7rem;
    color: #00ff00;
    font-family: 'JetBrains Mono', monospace;
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  
  .tech-radar {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border: 1px solid rgba(0, 255, 0, 0.5);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: all 0.5s ease;
  }
  
  .tech-badge-advanced:hover .tech-radar {
    width: 100%;
    height: 100%;
    animation: radarScan 2s ease-in-out infinite;
  }
  
  @keyframes techIconFloat {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-4px) rotate(5deg); }
  }
  
  @keyframes radarScan {
    0% { opacity: 1; transform: translate(-50%, -50%) scale(0); }
    100% { opacity: 0; transform: translate(-50%, -50%) scale(1.5); }
  }
  
  /* Staggered animations for tech badges */
  .tech-badge-0 { animation-delay: 0s; }
  .tech-badge-1 { animation-delay: 0.2s; }
  .tech-badge-2 { animation-delay: 0.4s; }
  .tech-badge-3 { animation-delay: 0.6s; }
  
  .skill-card-effect {
    position: relative;
    animation: skillFloat 7s ease-in-out infinite;
  }
  
  .skill-card-effect::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transition: left 0.8s ease;
    border-radius: 1rem;
  }
  
  .skill-card-effect:hover::before {
    left: 100%;
  }
  
  .skill-card-effect:hover {
    transform: translateY(-8px) scale(1.03);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  }
  
  .skill-bar::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    transition: left 1s ease;
  }
  
  .skill-card-effect:hover .skill-bar::before {
    left: 100%;
  }
  
  .tech-badge {
    position: relative;
    overflow: hidden;
  }
  
  .tech-badge::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, transparent, rgba(59, 130, 246, 0.3), transparent);
    transition: left 0.5s ease;
  }
  
  .tech-badge:hover::before {
    left: 100%;
  }
  
  .tech-badge:hover {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 0 8px 16px rgba(59, 130, 246, 0.3);
  }
  
  @keyframes skillFloat {
    0%, 100% { 
      transform: translateY(0px) rotateZ(0deg); 
    }
    50% { 
      transform: translateY(-3px) rotateZ(0.3deg); 
    }
  }
</style>

<script>
  // Animate skill bars on scroll
  const observerOptions = {
    threshold: 0.3,
    once: true
  };

  const skillBars = document.querySelectorAll('.h-2.rounded-full');
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const bar = entry.target;
        const width = bar.style.width;
        bar.style.width = '0%';
        
        setTimeout(() => {
          bar.style.width = width;
        }, 100);
      }
    });
  }, observerOptions);

  skillBars.forEach(bar => observer.observe(bar));
</script> -->